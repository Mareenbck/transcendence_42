// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["aggregateApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
	id				          Int			    @id @default(autoincrement())
	id42			          Int			    @default(autoincrement())
	createdAt		        DateTime    @default(now())

	email			          String		  @unique
	hash			          String
	username		        String		  @unique
	status			        UserStatus	@default(ONLINE)
	avatar			        String?
	ftAvatar		        String?

	hashedRtoken	      String?
	twoFAsecret		      String?
	twoFA			          Boolean?	@default(true)

	games               UserOnGame[]

  blocked             User[]       @relation("Blocked")
  blockedFrom         User[]       @relation("Blocked")

  friends             User[]        @relation("Friends")
  friendOf            User[]        @relation("Friends")
  sentFriendships     Friendship[]  @relation("SentFriendships")
  receivedFriendships Friendship[]  @relation("ReceivedFriendships")

  playerOne     Jeu[]  @relation("playerOne")
  playerTwo     Jeu[]  @relation("playerTwo")
  winner        Jeu[]  @relation("winner")

  chatrooms  ChatroomUsers[]
  dirMessEmited   DirectMessage[] @relation(name: "emited")
  dirMessReceived DirectMessage[] @relation(name: "received")
  crMessSent      ChatroomMessage[]

	@@map("users")
}

model Friendship {
  id            Int               @id @default(autoincrement())
  status        FriendshipStatus  @default(PENDING)
  requester     User              @relation("SentFriendships", fields: [requesterId], references: [id])
  requesterId   Int
  receiver      User              @relation("ReceivedFriendships", fields: [receiverId], references: [id])
  receiverId    Int

  @@unique([requesterId, receiverId])
}

model UserOnGame{
	id			Int			@id @default(autoincrement())
	user		User		@relation(fields: [userId], references: [id])
	userId		Int

	score		Int			@default(0)
	winner		Boolean?
	asPlayerOne Game? @relation("GamePlayerOne")
	asPlayerTwo Game? @relation("GamePlayerTwo")
}

model Game {
	id			Int			@id @default(autoincrement())
	createdAt	DateTime	@default(now())
	finishedAt	DateTime?
	playerOne				UserOnGame	@relation("GamePlayerOne", fields: [playerOneOnGameId], references: [id])
	playerOneOnGameId		Int			@unique
	playerTwo				UserOnGame	@relation("GamePlayerTwo", fields: [playerTwosOnGameId], references: [id])
	playerTwosOnGameId		Int			@unique
	@@map("games")
}

model Jeu {
  id      Int     @id @default(autoincrement())
  createdAt DateTime  @default(now())
  playerOne       User  @relation("playerOne", fields: [playerOneId], references: [id])
  playerOneId   Int     @unique
  playerTwo       User  @relation("playerTwo", fields: [playerTwoId], references: [id])
  playerTwoId    Int     @unique
  winner        User    @relation("winner", fields: [winnerId], references: [id])
  winnerId     Int
  @@map("jeux")
}

enum UserStatus {
	ONLINE
	OFFLINE
	PLAYING
}

model Chatroom {
  id      Int     @id @default(autoincrement())
  name    String
  avatar  String
  users   ChatroomUsers[]
  cr_messages ChatroomMessage[]
}


model ChatroomUsers {
  createdAt DateTime  @default(now())
  id          Int     @id @default(autoincrement())
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  chatroomId  Int
  chatroom    Chatroom @relation(fields: [chatroomId], references: [id])
  @@unique([userId, chatroomId])
}

model ChatroomMessage {
  id      Int     @id @default(autoincrement())
  content  String
  chatroomId Int
  chatroom Chatroom @relation(fields: [chatroomId], references: [id])
  authorId  Int
  author    User    @relation(fields: [authorId], references: [id])
  createdAt DateTime  @default(now())
}

model DirectMessage {
  id      Int     @id @default(autoincrement())
  content String
  author    Int
  userA        User    @relation(name: "emited", fields: [author], references: [id])
  receiver  Int
  userR        User    @relation(name: "received", fields: [receiver], references: [id])
  createdAt DateTime  @default(now())
}

enum FriendshipStatus {
	ACCEPTED
	PENDING
	REFUSED
}
